-#rails_admin-1.0 ready
:ruby
  query = params[:query]
  params = request.params.except(:authenticity_token, :action, :controller, :utf8, :bulk_export, :_pjax)
  params.delete(:query) if params[:query].blank?
  params.delete(:sort_reverse) unless params[:sort_reverse] == 'true'
  sort_reverse = params[:sort_reverse]
  sort = params[:sort]
  params.delete(:sort) if params[:sort] == @model_config.list.sort_by.to_s
  export_action = RailsAdmin::Config::Actions.find(:export, { controller: self.controller, abstract_model: @abstract_model })
  export_action = nil unless export_action && authorized?(export_action.authorization_key, @abstract_model)
  description = RailsAdmin.config(@abstract_model.model_name).description
  properties = @model_config.list.with(controller: self.controller, view: self, object: @abstract_model.model.new).visible_fields
  # columns paginate
  sets = get_column_sets(properties)
  properties = sets[params[:set].to_i] || []
  other_left = ((params[:set].to_i - 1) >= 0) && sets[params[:set].to_i - 1].present?
  other_right = sets[params[:set].to_i + 1].present?
  origins = nil

= content_for :contextual_tabs do
  = bulk_menu
  - if filterable_fields.present?
    %li.dropdown{style: 'float:right'}
      %a.dropdown-toggle{href: '#', :'data-toggle' => "dropdown"}
        = t('admin.misc.add_filter')
        %b.caret
      %ul.dropdown-menu#filters{style: 'left:auto; right:0;'}
        - filterable_fields.each do |field|
          - field_options = case field.type
          - when :enum
            - options_for_select(field.with(object: @abstract_model.model.new).filter_enum)
          - else
            - ''
          %li
            %a{href: '#', :"data-field-label" => field.label, :"data-field-name" => field.name, :"data-field-options" => field_options.html_safe, :"data-field-type" => field.type, :"data-field-value" => "", :"data-field-datetimepicker-format" => (field.try(:parser) && field.parser.to_momentjs)}= capitalize_first_letter(field.label)
= content_for :script do
  :javascript
    jQuery(function($) {
    #{ordered_filter_string}
    });

#list
  = form_tag(index_path(params.except(*%w[page f query])), method: :get, id: 'filter-form', class: "pjax-form form-inline") do
    .well
      %span#filters_box
        = filter_by_token
      %hr.filters_box{style: "display:#{ordered_filters.empty? ? 'none' : 'block'}"}
      .input-group
        %input.form-control.input-small{name: "query", type: "search", value: query, placeholder: t("admin.misc.filter")}
        %span.input-group-btn
          %button.btn.btn-primary{type: 'submit', :'data-disable-with' => '<i class="icon-white icon-refresh"></i> '.html_safe + t('admin.misc.refresh')}
            %i.icon-white.icon-refresh
            = t('admin.misc.refresh')
          %button#remove_filter.btn.btn-info{title: "Reset filters"}
            %i.icon-white.icon-remove
      .filters-buttons
        = found_menu
        %input{name: 'enable_chart', value: false, type: 'hidden'}
        -# Patch
        - if (model = @abstract_model.model).is_a?(Class) && model.include?(CrossOrigin::CenitDocument) && (origins = model.cross_origins).present?
          %span{style: 'float:right'}
            - acc = Account.current
            - origins.each do |origin|
              - origin_param="#{origin}_origin"
              %label{class: origin}= t("admin.origin.#{origin}")
              - param_value = (params[origin_param] || (acc && acc.meta[origin_param])).to_i
              %button.btn.toggle-origin{class: origin}
                %i{class: param_value.even? ? 'fa fa-toggle-on' : 'fa fa-toggle-off'}
              %input{name: origin_param, value: param_value, type: 'hidden'}
  - unless @model_config.list.scopes.empty?
    %ul.nav.nav-tabs#scope_selector
      - @model_config.list.scopes.each_with_index do |scope, index|
        - scope = '_all' if scope.nil?
        %li{class: "#{'active' if scope.to_s == params[:scope] || (params[:scope].blank? && index == 0)}"}
          %a{href: index_path(params.merge(scope: scope, page: nil)), class: 'pjax'}= I18n.t("admin.scopes.#{@abstract_model.to_param}.#{scope}", default: I18n.t("admin.scopes.#{scope}", default: scope.to_s.titleize))

  #grid-wrapper
    .row.add-clearfix
      - @objects.each_with_index do |object, index|
        .col-xs-6.col-sm-4.col-md-3
          %div{class: "panel panel-#{object.installed? ? object.origin : 'danger'} text-center"}
            .options-menu
              %span.btn.dropdown-toggle{type:'button', 'data-toggle': 'dropdown', 'aria-haspopup': 'true'}
                %i.fa.fa-ellipsis-v
                %ul.dropdown-menu= menu_for :member, @abstract_model, object
            .panel-heading
              =link_to show_path id: object.id do
                =object.title.presence || object.name.titleize
            .panel-body
              .panel-body-logo.text-center{style: "background-color:##{object.logo_background || 'inherit'}"}
                =link_to show_path id: object.id do
                  =image_tag object.image.present? ? object.image : 'missing.png', class: 'logo'
              .panel-body-description.line-clamp.line-clamp-3
                %p #{object.summary.html_safe if object.summary.present?}
            .panel-footer
              .footer-description
                %ul
                  #{(categories = object.categories).collect(&:title).count> 0 ? categories_list(categories) : t('admin.actions.dashboard.collections.no_categories')}
                .versions
                  .col-xs-4.col-xs-offset-4
                    - if (pull_action = RailsAdmin::Config::Actions.find(:pull, controller: controller, abstract_model: @abstract_model, object: object))
                      =link_to pull_path id: object.id do
                        %i{class: pull_action.link_icon}
                    - else
                      %i.fa.fa-arrow-down
                    -if object.pull_count > 0
                      %span.pull-count
                        =number_to_human object.pull_count, units: {thousand: 'K', million: 'M', billion: 'G', trillion: 'T'}
                  .col-xs-4.version
                    %span
                      = "v #{object.shared_version}"
    - if @objects.respond_to?(:total_count)
      - total_count = @objects.total_count.to_i
      .row
        .col-md-6= paginate(@objects, theme: 'ra-twitter-bootstrap', remote: true)
      .row
        .col-md-6= link_to(t("admin.misc.show_all"), index_path(params.merge(all: true)), class: "show-all btn btn-default clearfix pjax") unless total_count > 100 || total_count <= @objects.to_a.size
      .clearfix.total-count= "#{total_count} #{@model_config.pluralize(total_count).downcase}"
    - else
      .clearfix.total-count= "#{@objects.size} #{@model_config.pluralize(@objects.size).downcase}"
